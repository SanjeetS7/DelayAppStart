<!--
Copyright 2012 Keith Hole

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<html>
<head>


<HTA:APPLICATION
  APPLICATIONNAME="KePD"
  VERSION="22.6"
  CONTEXTMENU="yes"/>

<title>KePD v22.6: Printers</title>

    <!--
    'is2lc8th1
    -->
<script language="VBScript">

Sub Window_OnLoad
  	Dim width,height
'  	width=1014
  	width=screen.AvailWidth - 250
  	height=screen.AvailHeight - 100
'  	height=758
  	self.ResizeTo width,height
  	self.MoveTo (screen.AvailWidth-width) / 2, (screen.AvailHeight-height) / 2
  'This method will be called when the application loads
  'Add your code here
End Sub

'--------------------------------------------------------------------------- returns time stamp of last bootup
Function fnLastBootTime

     Set objWinMgmtsGetObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")
     Set colOSes = objWinMgmtsGetObject.ExecQuery("SELECT * FROM Win32_OperatingSystem")

   For Each objPCInfo in colOSes 
    strPCBootDate = objPCInfo.LastBootUpTime 
    fnLastBootTime = WMIDateStringToDate(strPCBootDate) 
   Next

End Function

'--------------------------------------------------------------------------- covert bytes to HDD Megs/Gigs, returns both size and free space of HDD
Function fnHDDInfo

   Set objWMIServiceOS = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")
   'Set HDList = objWMIServiceOS.ExecQuery("Select * from Win32_LogicalDisk Where Description = 'Local Fixed Disk'",,48)
   Set HDList = objWMIServiceOS.ExecQuery("Select * from Win32_LogicalDisk Where DeviceID = 'C:'",,48)
 
For Each objHDDInfo in HDList
	strHDDCapacity = objHDDInfo.Size
	strHDDFreeSapce = objHDDInfo.FreeSpace
	'strDeviceID = objHDDInfo.DeviceID
Next
   
'fnHDDInfo = strDeviceID

   fnHDDInfo = Round(strHDDFreeSapce/1073741824,2) & " GB of " & Round(strHDDCapacity/1073741824,2)  & " GB free"
   'fnHDDInfo = Round(strHDDFreeSapce/1000000000,2) & " GB of " & Round(strHDDCapacity/1000000000,2)  & " GB free"
   
End Function


'
'--------------------------------------------------------------------------- returns service pack level --------------------------------------------------------------------------- 
Function fnSerPackVer

     Set objWinMgmtsGetObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")

     Set colOSes = objWinMgmtsGetObject.ExecQuery("SELECT * FROM Win32_OperatingSystem")

     For Each objPCInfo in colOSes 
         strServicePack = objPCInfo.ServicePackMajorVersion
     Next

     If strServicePack >= 1 Then
          fnSerPackVer = "@SP" & strServicePack 
     Else
          fnSerPackVer = " w/no SP"
     End If
End Function

Function fnOSArchitecture

	Set objWinMgmtsGetObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")
	Set colOSes = objWinMgmtsGetObject.ExecQuery("SELECT * FROM Win32_OperatingSystem")

	For Each objPCInfo in colOSes
    	fnOSArchitecture = objPCInfo.OSArchitecture
	Next

End Function

Function fnOSName
    
	Set objWinMgmtsGetObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")

	Set colOSes = objWinMgmtsGetObject.ExecQuery("SELECT * FROM Win32_OperatingSystem")

	For Each objPCInfo in colOSes
    	OSName = Trim(objPCInfo.Caption)
	Next
	
	strGetValueWin7 = InStr(9,OSName,"Windows 7",1)
	strGetValueWinXP = InStr(9,OSName,"Windows XP",1)
	
	If strGetValueWin7 <> 0  Then
	   	fnOSName = "Win 7" 

'    End If
    
    ElseIf strGetValueWinXP <> 0 Then
    	fnOSName = "Win XP"
    End If 
    
	If strGetValueWinXP = 0 And strGetValueWin7 = 0 Then
	   	fnOSName = "Undetermined OS"
	End If
	
End Function

Function fnPinging 
'Don't use fnHostName Call for this one
    strEnteredPCName = Trim(txtPCName.value)
    txtPCName.value = strEnteredPCName
    'If fnHostName <> False Then 
    'MsgBox "made it"
    Set objPing = GetObject("winmgmts:{impersonationLevel=impersonate}").ExecQuery _ 
        ("select * from Win32_PingStatus where address = '" & strEnteredPCName & "'") 
  '("select * from Win32_PingStatus where address = '" & fnHostName & "'") 
  On Error Resume Next 
    For each objRetStatus in objPing 
        If IsNull(objRetStatus.StatusCode) Or objRetStatus.StatusCode <> 0 Or Err.Number <> 0 Then ' Or strEnteredPCName = "" Then 
            fnPinging = False
        Else 
            fnPinging = True
        End if 
    Next 
  

End Function

Function fnHostName

    strEnteredPCName = Trim(txtPCName.value)
    txtPCName.value = strEnteredPCName
		Set objWinMgmtsGetObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & strEnteredPCName & "\root\cimv2")

		Set objComputerSystem = objWinMgmtsGetObject.ExecQuery("SELECT * FROM Win32_ComputerSystem")

		For Each objHostName in objComputerSystem 
    		If Not IsNull (objHostName.Name) And IsObject (objHostName) Then
    			sInputvalue = Trim(objHostName.Name)
    		Else
    			fnHostName = False
    		End If
		Next
		
		If sInputvalue <> "" And Not IsNull (sInputvalue)  Then ' sInputvalue <> Nothing Then 
			fnHostName = sInputvalue
		End If 
End Function

Function fnLoggedOnUser
	Set objWinMgmtsGetObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")

	Set objComputerSystem = objWinMgmtsGetObject.ExecQuery("SELECT * FROM Win32_ComputerSystem")

	For Each objUserName in objComputerSystem
		
		sLoggedUser = objUserName.UserName
    	
	Next
		If sLoggedUser <> "" Or Not IsNull(sLoggedUser) Then 
    		fnLoggedOnUser = sLoggedUser 
    	Else 
    		fnLoggedOnUser = "No one"
    	End If 

End Function

'--------------------------------------------------------------------------- Convert bootup time to actual date ------------------------------------------------------------- 

 Function WMIDateStringToDate(dtmBootup) 
    WMIDateStringToDate = CDate(Mid(dtmBootup, 5, 2) & "/" & _ 
        Mid(dtmBootup, 7, 2) & "/" & Left(dtmBootup, 4) _ 
            & " " & Mid (dtmBootup, 9, 2) & ":" & _ 
                Mid(dtmBootup, 11, 2) & ":" & Mid(dtmBootup,13, 2)) 
End Function 

'--------------------------------------------------------------------------- memory: calculate/returns total visible memory
Function fnMemInfo

     Set objWinMgmtsGetObject = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")
     Set colOSes = objWinMgmtsGetObject.ExecQuery("SELECT * FROM Win32_OperatingSystem")
     
    For Each objPCInfo in colOSes 
        If Not IsNull (objPCInfo.TotalVisibleMemorySize) Then 
           fnMemInfo = FnMemory(objPCInfo.TotalVisibleMemorySize) 
        End If
    Next

End Function


'--------------------------------------------------------------------------- Convert memory amount to Megs/Gigs ---------------------------------------------------------------------------  
Function fnMemory(intMemory) 
        If intMemory >= 1048576 Then 
            fnMemory = round(intMemory/1048576,2) & "GB" 
        Else 
            fnMemory = round(intMemory/1024,2) & "MB" 
        End If 
End Function

'Function fnServicesList

'	Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")
    
 '   Set colServices = objWMIService.ExecQuery("Select * from Win32_Service")' Where State = "Started") 


  '  For Each objServices In colServices 
'    	If objServices.Started = True Then
'    		sStartedServiceList = sStartedServiceList & objServices.Name & vbCrLf
'    	End If 
'    	sStartedServiceList = sStartedServiceList & vbCrLf
'    Next
    
'    fnServicesList = sStartedServiceList

'End Function

Function fnERSInstalled

    Set objFSO = CreateObject("Scripting.FileSystemObject") 
	
	sERSPath = "\\" & fnHostName & "\c$\Program Files\eRS\eRSService.exe"
	
	If objfso.FileExists(sERSPath) Then
	'ADM8TMFY51
	'BILLING8MV7QN1
	fnERSInstalled = True 
		If eRSNotify.innertext = "" Then 

			eRSNotify.style.color="red"
			eRSNotify.style.fontsize="18"
			eRSNotify.style.fontWeight="bold"
			eRSNotify.style.fontFamily="Arial"

			'eRSNotify.innerhtml = "<center>ERS is installed</center>"
			eRSNotify.innertext = "ERS is Present"
			
		End If 
		
	Else
		eRSNotify.innertext = ""
		fnERSInstalled = False 
	
	End If 
	
End Function 


Function fnGetIEVer

    Set objFSO = CreateObject("Scripting.FileSystemObject") 
	
	sIEPath = "\\" & fnHostName & "\c$\Program Files\Internet Explorer\iexplore.exe"
	
	If objfso.FileExists(sIEPath) Then
'		sIEVobjFSO.GetFileVersion(sIEPath)
		sIEVer = objFSO.GetFileVersion(sIEPath)
		'objfso.
		'InStr(1,sIEPath,"6",1)
		'Dim fIEVerTest = Left (sIEVer, 3)
		
		If (Left (sIEVer, 2)) > 9 Then 
			fnGetIEVer = (Left (sIEVer, 2))
		Else
			fnGetIEVer = (Left (sIEVer, 3))
		End If 
	'Else
	'	fnGetIEVer = Inderminate
		'txtOutPut.value = "Unable to determine ie version" 
	End If 
		
	
End Function 

Function fnManuModel


   Set objWMIServiceOS = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")
   Set colGetManu = objWMIServiceOS.ExecQuery("Select * from win32_BIOS")
   Set colGetModel = objWMIServiceOS.ExecQuery("Select * FROM Win32_ComputerSystem")
   
   For Each oMod in colGetModel
       sModName = Trim(oMod.Model)
   Next
  
  For Each oMan in colGetManu 
      sManName = Trim(oMan.Manufacturer)
  Next
  
  If Left(sManName, 4) = "Dell" Then
  	sManName = "Dell"
  End If
  
  
  fnManuModel = sManName & " " & sModName

End Function



Function fnLaptopOrDesktop

	Set objWMIService = GetObject("winmgmts:" _ 
    & "{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2")
 
Set colChassis = objWMIService.ExecQuery("Select * from Win32_SystemEnclosure") 
 
For Each objChassis in colChassis 
    For i = Lbound(objChassis.ChassisTypes) to Ubound(objChassis.ChassisTypes) 
        iPCType = objChassis.ChassisTypes(i) 
    Next 
Next

Select Case iPCType
	Case 1
		sType = "Other"
	Case 2
		sType = "Unknown"
	Case 3
		sType = "Desktop"
		fnLaptopOrDesktop = "Desktop"
	Case 4
		sType = "Low Profile Desktop"
		fnLaptopOrDesktop = "Desktop"
	Case 5
		sType = "Pizza Box"
	Case 6
		sType = "Mini Tower"
		fnLaptopOrDesktop = "Desktop"
	Case 7
		sType = "Tower"
		fnLaptopOrDesktop = "Desktop"
	Case 8
		sType = "Portable"
		fnLaptopOrDesktop = "Laptop"
	Case 9
		sType = "Laptop"
		fnLaptopOrDesktop = "Laptop"
	Case 10
		sType = "Notebook"
		fnLaptopOrDesktop = "Laptop"
	Case 11
		sType = "Hand Held"
	Case 12
		sType = "Docking Station"
		fnLaptopOrDesktop = "Laptop on docking station"
	Case 13
		sType = "All in One"
	Case 14
		sType = "Sub Notebook"
		fnLaptopOrDesktop = "Laptop"
	Case 15
		sType = "Space-Saving"
		fnLaptopOrDesktop = "Desktop" ' a gx260 came up as this, 2-16-12
	Case 16
		sType = "Lunch Box"
		fnLaptopOrDesktop = "Desktop" ' just got a returned "lunch box" type today, 2-9-2012
	Case 17
		sType = "Main System Chassis"
		fnLaptopOrDesktop = "Desktop" 'i assume it's a desktop(?)
	Case 18
		sType = "Expansion Chassis"
	Case 19
		sType = "SubChassis"
	Case 20
		sType = "Bus Expansion Chassis"
	Case 21
		sType = "Peripheral Chassis"
	Case 22
		sType = "Storage Chassis"
	Case 23
		sType = "Rack Mount Chassis"
	Case 24
		sType = "Sealed-Case PC"
		fnLaptopOrDesktop = "Desktop"
	Case Else 
		If fnLaptopOrDesktop = "" Then 
			fnLaptopOrDesktop = "Did not return a chassis type"
		End If
		
End Select

		If fnLaptopOrDesktop = "" Then 
			fnLaptopOrDesktop = "Chasis type returned is " & sType
		End If

End Function


Function fnAllUserProgramFiles

'----------------------------------------------------------------------------------------------
    Set objFSO = CreateObject("Scripting.FileSystemObject") 
    '\\172.16.32.231\c$\Documents and Settings\All Users\Start Menu\Programs
	If Trim(fnOSName) = "Win XP" Then
		If objfso.FolderExists("\\" & fnHostName & "\c$\documents and settings\all users\Start Menu\Programs") Then 
			fnAllUserProgramFiles = "\\" & fnHostName & "\c$\documents and settings\all users\Start Menu\Programs"
		End If
	ElseIf Trim(fnOSName) = "Win 7" Then
'C:\ProgramData\Microsoft\Windows\Start Menu\Programs	
		If objfso.FolderExists("\\" & fnHostName & "\c$\ProgramData\Microsoft\Windows\Start Menu\Programs") Then
			fnAllUserProgramFiles = "\\" & fnHostName & "\c$\ProgramData\Microsoft\Windows\Start Menu\Programs"
		End If
	Else 
		fnAllUserProgramFiles = "unable to determine OS"
	End If
' is2lc8th1
End Function

Function fnAllUserDesktop

'----------------------------------------------------------------------------------------------
    Set objFSO = CreateObject("Scripting.FileSystemObject") 
    
	If Trim(fnOSName) = "Win XP" Then
		If objfso.FolderExists("\\" & fnHostName & "\c$\documents and settings\all users\desktop") Then 
			fnAllUserDesktop = "\\" & fnHostName & "\c$\documents and settings\all users\desktop"
		End If
	ElseIf Trim(fnOSName) = "Win 7" Then
		If objfso.FolderExists("\\" & fnHostName & "\c$\Users\Public\Desktop") Then
			fnAllUserDesktop = "\\" & fnHostName & "\c$\Users\Public\Desktop"
		End If
	Else 
		fnAllUserDesktop = "unable to determine OS"
	End If

End Function

Sub btnSubmitGetManu_onclick
If fnPinging = True Then
 	txtOutPut.value = txtOutPut.value &  fnManuModel & " "
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub

Sub btnSubmitOpenAdminShare_onclick
If fnPinging = True Then
    
    strCommand = "c:\windows\explorer.exe \\" & fnHostName & "\c" & Chr(36) 
    Set objShell = CreateObject("Wscript.Shell")
    objShell.Run(strCommand) 
Else txtOutPut.value = "Unable to Open admin share on the host '" & txtPCName.value & "' - not pingable"
End If
End Sub

Sub btnClear_onclick
    txtOutPut.Value = ""
    txtPCName.Value = "Host or IP"
    eRSNotify.innertext = ""
'    SpanServiceListInfo.innertext = ""
End Sub

Sub btnSubmitCopyClip_onclick
    strCopy = txtOutPut.Value 
    document.parentwindow.clipboardData.SetData "text", strCopy 
End Sub

Sub txtPCName_onfocus
    If txtPCName.Value = "Host or IP" Then 
       txtPCName.Value = ""
    End If
End Sub

Sub btnExit_onclick
 self.close()
End Sub

Sub btnSubmitOpenVNC_onclick

If fnPinging = True Then
Set objFSO = CreateObject("Scripting.FileSystemObject") 
Set objShell = CreateObject("Wscript.Shell")	

	If objfso.FileExists("C:\Program Files\UltraVNC\vncviewer.exe") Then
		strCommand = Chr(34) & "C:\Program Files\UltraVNC\vncviewer.exe" & Chr(34) & " " & fnHostName
		objShell.Run(strCommand) 
	End if

	'strCommand = Chr(34) & "\\is2lc8th1\c$\Program Files\UltraVNC\vncviewer.exe" & Chr(34) & " " & fnHostName
	'"C:\Program Files\UltraVNC\vncviewer.exe" & Chr(34) & " " & fnHostName


		strCommand = Chr(34) & "C:\Program Files\UltraVNC\vncviewer.exe" & Chr(34) & " " & fnHostName

Else txtOutPut.value = "Unable to VNC to the host '" & txtPCName.value & "' - not pingable"
End If
End Sub

Sub btnSubmitQuery_onclick
If fnPinging = True Then

	If fnERSInstalled = True Then 
		sERS = "eRS installed"
	Else 
		sERS = ""
	End If

	'If fnOSName = "Win XP" Or fnOSName = "Win 7" Then
	'	sOSpSP = fnOSName & fnSerPackVer '& " (" & fnOSArchitecture & ")"
	'ElseIf fnOSName = "Win 7" And fnOSArchitecture = "64-bit" Then
	'	sOSpSP = fnOSName & fnSerPackVer & " (" & fnOSArchitecture & ")"
	'End If 
	'If sArg <> "" And Not IsNull(sArg) Then
	
	If fnOSName = "Win XP" Then
		sOSpSP = fnOSName & fnSerPackVer  
	ElseIf fnOSName = "Win 7" And fnOSArchitecture <> "" And Not IsNull(fnOSArchitecture) Then
		sOSpSP = fnOSName & fnSerPackVer & " (" & fnOSArchitecture & ")" 
	End If
	

    'txtOutPut.value = fnHostName &  " (" & fnLaptopOrDesktop & ")" &  " - " & sOSpSP & _
	txtOutPut.value = fnHostName &  " (" & fnLaptopOrDesktop & ")" &  " - " & sOSpSP & _
     " - IE: " & fnGetIEVer & " - Logged in as: " & fnLoggedOnUser & vbCrLf & sERS 
     '& " - RAM: " & fnMemInfo
     
     '(" & fnLaptopOrDesktop & ")

Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"

End If

End Sub
'is6fpxc91

Sub btnSubmitPushIntramarsh_onclick
If fnPinging = True Then

	Call fnPushShortcut("http://intramarsh/", "IntraMarsh.url", "" )

Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub

Sub btnSubmitGetPushAcrobat_onclick
If fnPinging = True Then
' chr(34) &  - "
	Call fnPushShortcut("\\marshsoft\software\Adobe Reader 8\AdbeRdr810_en_US.exe", "AdbeRdr810_en_US.exe.lnk", " -s")

Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub


Function fnPushShortcut( sShortcutURL, sShortcutName, sArg )
' stand alone function: 
' goal was to make shortcut agnostic
' provide path to exe/URL, name of shortcut and argument if any (as a string)
' short-specific stuff to be added to button sub/other functions
' make sArg just two double quotes ("") if no args passed
' must include the '.lnk' or the '.url' in the shortcutname
' could parse passed in string and add one or other, leave that for later

	Set objShell = CreateObject("Wscript.Shell")
	Set objFSO = CreateObject("Scripting.FileSystemObject") 
	'sShortcutName = "Outlook Web Access.url"
	sShortCutPath = fnAllUserDesktop & "\" & sShortcutName 
    
	Set oLink = objshell.CreateShortcut(sShortCutPath)
	
	If sArg <> "" And Not IsNull(sArg) Then

			oLink.Arguments = sArg

	End If
	
	oLink.TargetPath = sShortcutURL
	oLink.save
	

End Function

Function fnListInstallPrinters
	
	Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2") 
	Set colInstalledPrinters = objWMIService.ExecQuery("SELECT * FROM Win32_Printer") 
	
	Dim sFoundPrinter : sFoundPrinter = " "
	
	For Each objPrinter In colInstalledPrinters
		sFoundPrinter = sFoundPrinter & vbCrLf & objPrinter.Name  
		fnListInstallPrinters = sFoundPrinter
	Next
	
	' 
	
End Function

Function fnListMappedDrives

Set objWMIService = GetObject("winmgmts:" _ 
    & "{impersonationLevel=impersonate}!\\" & fnHostName & "\root\cimv2") 
 
Set colItems = objWMIService.ExecQuery("Select * from Win32_MappedLogicalDisk") 
' txtOutPut.value = "right before end of function" & vbCrLf 
 'note that .caption and .name are apparently the same (a drive letter)
 For Each objMapDrive In colItems

 		'MapDriveList = 
 		'MapDriveList = vbCrLf  & objMapDrive.ProviderName '& " as " & objMapDrive.ProviderName
 		MapDriveList = MapDriveList & objMapDrive.name  & " as " & objMapDrive.ProviderName & vbCrLf  

 Next
 'txtOutPut.value = txtOutPut.value & "right before end of function" & vbCrLf & MapDriveList
 fnListMappedDrives = MapDriveList

End Function 

Sub btnSubmitPushOWA_onclick
'update mid-marsh 2012:
'this is a no longer needed sub: replaced with the two list boxes

'MsgBox "reached function"

' note that the scripting filesystem object will not copy to or from a UNC, e.g. \\users\public\desktop
' it will work if that UNC path mapped or has a letter assigned to it via SUBST
' the subst method has only been tested on win7

If fnPinging = True Then

'apparently when you have more than one argument you have to use the word "Call"
Call fnPushShortcut("https://mail.marshallmedical.org/exchange/", "Outlook Web Access.url", "" )


Else txtOutPut.value = "Unable to copy to the host as '" & txtPCName.value & "' is not pingable"

End If
End Sub

Sub btnSubmitGetLastBootTime_onclick
If fnPinging = True Then
     
     txtOutPut.value = txtOutPut.value & vbCrLf & "Last booted at: " & fnLastBootTime 
     
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If

End Sub

Sub btnSubmitGetMemInfo_onclick
If fnPinging = True Then
     txtOutPut.value = txtOutPut.value & fnMemInfo & " "
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If 
End Sub 

Sub btnSubmitGetOSArch_onclick
If fnPinging = True Then
   
   txtOutPut.value = txtOutPut.value & fnOSArchitecture & " "
         
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If 

End Sub 

Sub btnSubmitGetHDDSpace_onclick
If fnPinging = True Then

	txtOutPut.value = txtOutPut.value & fnHDDInfo & " "

Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If 
End Sub

Sub btnSubmitGetHostName_onclick
If fnPinging = True Then
	
	txtOutPut.value = txtOutPut.value & fnHostName & " "
	
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub

Sub btnSubmitGetOSVer_onclick
If fnPinging = True Then
	
	txtOutPut.value = txtOutPut.value & fnOSName & " "
	
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub

Sub btnSubmitGetSPLevel_onclick
If fnPinging = True Then
	
	txtOutPut.value = txtOutPut.value & fnSerPackVer & " "
	
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub

Sub btnSubmitGetLoggedOnUser_onclick
If fnPinging = True Then

	txtOutPut.value = txtOutPut.value & fnLoggedOnUser & " "

Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub

' is2lc8th1
Sub btnSubmitGetIEVer_onclick
If fnPinging = True Then
	
	txtOutPut.value = txtOutPut.value & fnGetIEVer & " "
	
	
Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If
End Sub

Sub btnSubmitGetAllUserDesktop_onclick
If fnPinging = True Then
	
	txtOutPut.value = txtOutPut.value & fnAllUserDesktop '& " "
	'txtOutPut.value = txtOutPut.value & fnAllUserProgramFiles

Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"
End If	
End Sub

Sub btnSubmitGetDesktopOrLaptop_onclick
If fnPinging = True Then
	txtOutPut.value = txtOutPut.value & fnLaptopOrDesktop & " "

End If	
End Sub

Sub btnSubmitAllUserProgramFiles_onclick
If fnPinging = True Then
		 txtOutPut.value = txtOutPut.value & fnAllUserProgramFiles & " "
End If
End Sub

Sub btnSubmitParagonFolderShortcut_onclick
If fnPinging = True Then

	Call fnPushShortcut(sParagonFolderPath, "Paragon 10.2.lnk", "" )
	
End If 
End Sub

'Sub TableCell_onclick
'	MsgBox "clicked!"
'End Sub

'Sub TableRow_ondblclick
'	MsgBox "double clicked!"
'	TableCell.bgcolor="lime"
'	'style.backgroundColor='lime'
'End Sub

'Sub TableCell_onmouseover
'	TableCell.style.backgroundcolor="lime"
'	TableCell.style.border="1px solid blue"
'	TableCell.innertext="changed the text"
'End Sub

'Sub TableCell_onmouseout
'	TableCell.style.backgroundcolor="white"
'	TableCell.style.border="1px solid blue"
'	TableCell.style.border.color="blue"
'End Sub

Sub btnSubmitAddHardware_onclick
If fnPinging = True Then
	fnERSInstalled
	txtOutPut.value = txtOutPut.value & vbCrLf & "RAM: " & fnMemInfo & " - HDD: " & fnHDDInfo & _
	" - " & fnManuModel & " (" & fnLaptopOrDesktop & ")"
	
End If
End Sub

Sub btnShowPrinters_onclick
If fnPinging = True Then

	 txtOutPut.value =  "printers: " & fnListInstallPrinters

End If
End Sub

Sub btnSubmitListMappedDrives_onclick
If fnPinging = True Then

	txtOutPut.value = txtOutPut.value & vbCrLf & "Mapped drives:" & vbCrLf & fnListMappedDrives

End If
End Sub

'Sub SpanServiceListInfo_onclick
'If fnPinging = True Then
'	If SpanServiceListInfo.innertext = "" Then 
'		SpanServiceListInfo.innertext = SpanServiceListInfo.innertext & vbCrLf & fnServicesList
	'Else
	'	SpanServiceListInfo.innertext = ""
'	End If

'End If
'End Sub


Sub spHeader_onclick
	If spShowHide.style.display = "inline" Then 
		spShowHide.style.display = "none"
	ElseIf spShowHide.style.display = "none" Then
		spShowHide.style.display = "inline"
	End If
End Sub 

Sub btnParseBox2_onclick
If fnPinging = True Then
	For Each objOption in mylistbox2.Options
		'objOption.innerhtml = 
		'spOutPut.innertext = spOutPut.innertext & objOption.text '& vbCrLf 
		'objOption.innerhtml = objOption.innerhtml &  "<br>"
		'spOutPut.innertext 
		'spOutPut.innerhtml = "<p>"
		'spOutPut.innerhtml & "<p>"
		'spOutPut.innerhtml = "Shorcuts located at: " & SHORTCUTLOCATION
		
		sOptText = objOption.innerhtml

        sParagonSetupString = " ADDLOCAL=ALL KEY_LB=ES2 KEY_PR=44K KEY_RD=M6B KEY_RS=F99 KEY_RX=L2K KEY_MM=4F9 KEY_FA=D8M KEY_CC=5AC KEY_MA=GP1 KEY_OR=VYZ KEY_RI=55N KEY_ED=B52"

		sOfficeSetupString = "COMPANYNAME=" & Chr(34) & "Marshall Medical Center" & Chr(34) & " " & Chr(34) & "PIDKEY=FCF2324BT8XP2BW66JFTP4XVT" & Chr(34)
		'sShortcutTransferred = ""

		Select Case sOptText

			Case "Intramarsh"
				'spOutPut.innerhtml = sOptText
				'spOutPut.innerhtml = spOutPut.innerhtml &  
				Call fnPushShortcut("http://intramarsh/", "Intramarsh.url", "") '& "<br>"
				
			Case "Web outlook"
				'spOutPut.innerhtml = spOutPut.innerhtml & 
				Call fnPushShortcut("https://mail.marshallmedical.org/", "Outlookweb.url", "") '& "<br>"
				
			Case "acrobat reader"
				'spOutPut.innerhtml = spOutPut.innerhtml & 
				Call fnPushShortcut("\\marshsoft\software\Adobe Reader\Reader8\AdbeRdr810_en_US.exe","Acrobat 8 installer.lnk","/sPB /rs") '& "<br>"
				
			Case "SP3 for XP"
				'spOutPut.innerhtml = spOutPut.innerhtml & 
				Call fnPushShortcut("\\marshsoft\software\WINXPSP3\i386\update\update.exe", "XP SP3 silent install.lnk", "/passive /overwriteoem /nobackup") '& "<br>"
				
			Case  "Kronos web page"
				Call fnPushShortcut("http://kronos/wfc/logon/", "Kronos Web Logon.url",  "")
				
			Case "Map Network drive PDF"
				Call fnPushShortcut("http://intramarsh/upload/docs/Divisions/IS/Mapping%203%20standard%20drives.pdf", "How to map network drives PDF.url",  "")
				
			Case "VPN Walk-through Guide PDF"
				Call fnPushShortcut("http://intramarsh/upload/docs/Divisions/IS/VPN%20basicdirections.pdf", "VPN Walk-through Guide PDF.url",  "")	
				
			Case "Office 2k3 setup: key filled in"
				Call fnPushShortcut("\\marshsoft\software\Office2003\SETUP.EXE","Office 2k3.lnk", sOfficeSetupString)

			Case "Pargon 11: keys filled in only [use for manual install]"
				Call fnPushShortcut("\\data\MarshallScripts\Paragon\11.1.0\ClientSoftware\Paragon_11.1.0.msi","Paragon 11 Manual Install [Delete this].lnk", sParagonSetupString)

'\\data\MarshallScripts\Paragon\11.1.0\ClientSoftware\Paragon_11.1.0.msi 

			Case "Web station for physicians"
				Call fnPushShortcut("https://webstation.marshallmedical.org/","Web Station for Physicians.url", "")

			Case "Forms WebStation"
				Call fnPushShortcut("http://pgntliv1dns/WSF","Forms WebStation.url", "")

			Case "Physicians Security Release Request Form"
				Call fnPushShortcut("https://www.marshallmedical.org/webforms/forms/PhysPortalRequestAccess.htm","Physicians Security Release Request Form.url", "")

			Case "Physicians Security Release Request Form"
				Call fnPushShortcut("https://www.marshallmedical.org/physportal/","Physician Portal Login.url", "")

			Case "e-Scription (new)"
				Call fnPushShortcut("http://www.escription.com/","e-Scription.url", "")

			Case "PACs Web Client"
				Call fnPushShortcut("https://pacs.marshallmedical.org/","PACs.url", "")				
				



'Physicians Security Release Request Form
		End Select
		'Web station for physicians
'Office 2k3 setup: key filled in

'spOutPut.innerhtml = "The following shortcuts were created:<p>"
	'spOutPut.innerhtml = spOutPut.innerhtml & objOption.text & "<br>"
'	spOutPut.innerhtml = sOptText
'spOutPut.innerhtml = spOutPut.innerhtml & "</p>"
'spOutPut.innerhtml = spOutPut.innerhtml & objOption.text & "<br>"

	Next
	
	 txtOutPut.value =  txtOutPut.value & sShortcutTransferred
	 

Else txtOutPut.value = "Unable to ping the host '" & txtPCName.value & "'"

End If 
End Sub 

Sub btnMoveBack_onclick

    For Each objOption in mylistbox2.Options
        If objOption.Selected = True Then
           	objOption.RemoveNode
           	mylistbox1.Add(objOption)
        End If
    Next

End Sub

Sub btnMoveOver_onclick

    For Each objOption in mylistbox1.Options
        If objOption.Selected = True Then
           	objOption.RemoveNode
           	mylistbox2.Add(objOption)
        End If
    Next

End Sub

</script>
</head>
<body>

KePD<br>
Iteration 2, v22.6 - printers

<p>
<!--
<div id="DivID1">
<table border="0">
	<tr id="TableRow" >
		<td id="TableCell" bgcolor="grey" isContentEditable="true" isTextEdit="true">Table cell</td>
	</tr>
<table>
</div>
-->

</p>
<br>
<p>
 <input id=txtPCName value="Host or IP" name=txtIPorName><p></p>
 <input id=btnSubmitQuery value="New w/o query" type=submit name=SubmitQuery> 
 <input id=btnSubmitAddHardware value="Add hardware info" type=submit name=SubmitAddHardware> 
<!--
 <input id="btnSubmitGetManu" value="Get Vendor/Model (if available)" type="submit" name=SubmitGetManu>

 <input id="btnSubmitGetMemInfo" value="Mem Info" type="submit" name=SubmitGetMemInfo>
 -->
 <input id="btnSubmitGetLastBootTime" value="Time Last Booted" type="submit" name=SubmitGetLastBootTime>
 <input id="btnSubmitListMappedDrives" value="List Mapped Drives (Win 7 only)" type="submit" name="SubmitListMappedDrives">
<!-- 
 <input id="btnShowPrinters" value="List Printers" type="submit" name="ShowPrinters">
--> 
 <br>
<!--
 <input id="btnSubmitGetHDDSpace" value="HDD Info" type="submit" name=SubmitGetHDDSpace> 
 <input id="btnSubmitGetHostName" value="Host Name" type="submit" name=SubmitGetHostName> 
 <input id="btnSubmitGetOSVer" value="OS Version" type="submit" name=SubmitGetOSVer> 
 <input id="btnSubmitGetSPLevel" value="SP Level" type="submit" name=SubmitGetSPLevel> 
 <input id="btnSubmitGetLoggedOnUser" value="Logged on User" type="submit" name=SubmitGetLoggedOnUser> 
 
 <input id="btnSubmitGetIEVer" value="Show IE Version" type="submit" name=SubmitGetIEVer>
 
  <input id="btnSubmitGetIEVer" value="Show IE Version" type="submit" name=SubmitGetIEVer>
 -->
 <br>
<!--
 <input id="btnSubmitGetAllUserDesktop" value="All user desktop path" type="submit" name=SubmitGetAllUserDesktop> 
 <input id="btnSubmitGetDesktopOrLaptop" value="Laptop or Desktop" type="submit" name=SubmitGetDesktopOrLaptop> 
-->


  </p>
  
  <span id="eRSNotify"></span>
  
  
 <p>
    <textarea id=txtOutPut cols=85 rows=7 name=OutPutArea></textarea>
</p>
    <span id=SpanInstallAppsList></span>
    
    <input id=btnSubmitCopyClip value="Copy text to clipboard" type="submit"  name="SubmitCopyClip">
    <input id=btnSubmitOpenAdminShare value="Open C$ share" type="submit" name="SubmitOpenAdminShare"> 
    <input id=btnSubmitOpenVNC value="VNC to Host" type="submit" name="SubmitOpenVNC"> 
    <p>
		<!--
		<span id=SpanServiceListInfo>Click here to show services list</span>
		-->
	</p>
    
    <!--
    <input id=btnSubmitAllUserProgramFiles value="All users program files path" type="submit" name="SubmitAllUserProgramFiles"> 
    <h3>Shortcuts to Push</h3>
    
    <input id=btnSubmitPushIntramarsh value="Push Intramarsh shortcut" type="submit" name="SubmitPushIntramarsh"> 
    <input id=btnSubmitPushOWA value="Push OWA shortcut" type="submit" name="SubmitPushOWA">
    <input id=btnSubmitParagonFolderShortcut value="10.2 program files folder shortcut" type="submit" name="SubmitParagonFolderShortcut"> 
  	<input id="btnSubmitGetPushAcrobat" value="Adobe Reader Shortcut - installer" type="submit" name=btnSubmitGetPushAcrobat> 
	-->
    <p>

    <input id=btnExit value="Quit" type="submit" name="SubmitQuit">  
    <input id=btnClear value="Start Over" type="submit" name="SubmitClear"> 
<!--
    <input id=btnSubmitPushIntramarsh value="Push Intramarsh shortcut" type="submit" name="SubmitPushIntramarsh">  
    <input id=btnSubmitPushOWA value="Push OWA shortcut" type="submit" name="SubmitPushOWA">  
-->
    </p>

<p><br></p>

<center>
<span id=spHeader style="border: 2px solid green; Width:400; text-align:center align:center" >
  Click Here to Select Shortcuts to Push 
</span>
</center>
<br>

<span id=spShowHide style="display: none">

<select name=mylistbox1 multiple size=8 style="width:200; height:250">
<option>Intramarsh</option>
<option>Web outlook</option>
<option>Kronos web page</option>
<option>Web station for physicians</option>
<!--
<option>Forms WebStation</option>
-->
<option>Physicians Security Release Request Form</option>
<option>Physician Portal Login</option>
<option>e-Scription (new)</option>
<option>PACs Web Client</option>
<option>acrobat reader</option>
<option>SP3 for XP</option>
<option>Map Network drive PDF</option>
<option>VPN Walk-through Guide PDF</option>
<option>Office 2k3 setup: key filled in</option>
<option>Pargon 11: keys filled in only [use for manual install]</option>
</select>

    <input id=btnMoveOver value=" > " type="submit"  name="MoveOver" style="verticalAlign: 20%">
    <input id=btnMoveBack value=" < " type="submit"  name="MoveBack" style="verticalAlign: -10%">
<select name="mylistbox2" multiple size=8 style="width:200; height:250"></select> 
<p>
    <input id="btnParseBox2" value="Push Selected Shortcuts" type="submit"  name="ParseBox2" align="left"><p>

    </span>
</span>



<!-- Insert HTML here --></BODY></HTML>


<!--
Sub btnMoveOver_onclick

    For Each objOption in mylistbox1.Options
        If objOption.Selected = True Then
           	objOption.RemoveNode
           	mylistbox2.Add(objOption)
        End If
    Next

End Sub

Sub btnMoveBack_onclick

    For Each objOption in mylistbox2.Options
        If objOption.Selected = True Then
           	objOption.RemoveNode
           	mylistbox1.Add(objOption)
        End If
    Next

End Sub

<select name=mylistbox1 multiple size=8 style="width:400">
<option>Intramarsh</option>
<option>Web outlook</option>
<option>acrobat reader</option>
<option>SP3 for XP</option>
</select>

    <input id=btnMoveOver value=" > " type="submit"  name="MoveOver">
    <input id=btnMoveBack value=" < " type="submit"  name="MoveBack">


<select name=mylistbox2 multiple size=8 style="width:400"></select>
-->
