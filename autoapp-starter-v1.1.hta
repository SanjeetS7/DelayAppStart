<html>

<head>

<title>auto-app-starter v1</title>

<HTA:APPLICATION
  APPLICATIONNAME="Auto-appstarter-v1"
  VERSION="1"
  CONTEXTMENU="yes"/>

<script language=JScript>
    //i think i figured this out:
    // each time setTimeout is executed a timer is started
    // so if three setTimeouts are called in a row all three are executed immediately and
    // are running in tandom witch each other
    // thus two function calls with 3000 ms each are three seeprate countdown timers
    // running at once and all three things will execute at the exact same time
    // MSDN language reference for setTimeout: 
    //http://msdn.microsoft.com/en-us/library/ie/ms536753(v=vs.85).aspx

    // i was going to try something with setInterval instead and was looking at the sample source
    // of 
    //http://samples.msdn.microsoft.com/workshop/samples/author/dhtml/refs/setInterval.htm
    // when i noted the new Date and getSeconds off the date object and thought maybe
    // i could use that as a way to calculate how much time to wait
    // or take the prior number of seconds and add it to the next 
    //i.e. if IE is 3 seconds and steam is 5 then since both timers start at once 
    // steam would be "IE's time plus 5 seconds"
    //not yet sure how to track that.


    // global variables

var WshShell = new ActiveXObject("WScript.Shell");

var sIEPath = "\"C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe\"";
var sSteamPath = "\"P:\\Program Files (x86)\\Steam\\Steam.exe\""

setTimeout('alert("app path is " + sIEPath)', 3000);
setTimeout('var i = function (){ return 0}', 3000);
setTimeout('alert("app path is " + sSteamPath)', 3000);

//setTimeout('WshShell.Run(sIEPath)', 3000);


function fnRunApps(sAppPath, numSeconds) {





   // var runApp = function () { WshShell.Run(sAppPath); }

   // setTimeout(runApp, numSeconds);
    //alert(sAppPath);
    //setTimeout("WshShell.Run(sAppPath)", 3000);
    setTimeout('alert("app path is " + sAppPath + " and seconds is " + numSeconds)', numSeconds);
//    alert("app path is " + sAppPath + " and seconds is " + numSeconds);
    //alert("Ran through loop for " + sAppPath + " ");

}


    // this is copy/pasted from MS sample page for timeout, 
    //note the enclosing/escaped quotes
    //window.setTimeout("alert(\"Hello, world\")", 5000);

//fnRunApps(sIEPath, 5000);
//fnRunApps(sSteamPath, 10000);


    /*
document.write("Executing application list...</br>");

var iRunIE = function () {
    document.write("Executing IE...</br>");

    var strCommand1 = "\"C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe\"";
    WshShell.Run(strCommand1);
};
var RunSteam = function () {
    document.write("Executing Steam...</br>");

    var strCommand2 = "\"P:\\Program Files (x86)\\Steam\\Steam.exe\""
    WshShell.Run(strCommand2);
};
var RunAppsArr = [ iRunIE, RunSteam];

//var i = 0;

for (var i = 0; i < RunAppsArr.length; i++) {
    //setInterval(RunAppsArr[i], 1000);
    setTimeout(RunAppsArr[i], 1000);
    alert("Ran the thing at array element " + RunAppsArr[i]);
    //clearInterval();
}

    */
    /*
while (i < RunAppsArr.length) {
    setInterval(RunAppsArr[i], 5000);
    i++;
    if (i === (RunAppsArr.length - 1)) {
        clearInterval
    }
}
    */
//setTimeout(RunSteam, 5000);
//setTimeout(iRunIE, 5000);
//note: wscript.sleep does not work in HTAs

// this doesn't work so commenting it out
//iSleeperTime();

//setInterval( if (1 > 0) {},500);
//setInterval( function() {if (1 > 0) {} },5000);

//i don't think this was working, so i'm trying a different method
//setTimeout( fnFunctionThatReturns(),5000);

//document.write("Executing outlook...</br>");

//enable this for work
    //var strCommand2 = "\"C:\\Program Files (x86)\\Microsoft Office\\Office12\\OUTLOOK.EXE\"";

//WshShell.Run(strCommand2);

// doesn't work, commenting
/*
function iSleeperTime( iSeconds ) {

}
*/ 

</script>


</head>


    <div id="output"></div>


</html>
